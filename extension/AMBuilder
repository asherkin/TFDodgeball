# vim: set ts=2 sw=2 tw=99 noet ft=python: 
import os

for i in SM.sdkInfo:
	sdk = SM.sdkInfo[i]
	if AMBuild.target['platform'] not in sdk['platform']:
		continue

	compiler = SM.DefaultHL2Compiler('extension', i)

	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.sourceFolder, 'extension'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.sourceFolder, 'extension', 'sdk'))
	
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['SOURCEMOD14'], 'public'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['SOURCEMOD14'], 'extensions'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['SOURCEMOD14'], 'public', 'sourcepawn'))
	
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['HL2SDKOBVALVE'], 'public'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['HL2SDKOBVALVE'], 'public', 'mathlib'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['HL2SDKOBVALVE'], 'public', 'SoundEmitterSystem'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['HL2SDKOBVALVE'], 'public', 'engine'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['HL2SDKOBVALVE'], 'public', 'tier0'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['HL2SDKOBVALVE'], 'public', 'tier1'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['HL2SDKOBVALVE'], 'public', 'game', 'server'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['HL2SDKOBVALVE'], 'game', 'shared'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.cache['HL2SDKOBVALVE'], 'game', 'server'))
	
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.sourceFolder, 'extension', 'CEntity'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.sourceFolder, 'extension', 'CDetour'))
	compiler['CXXINCLUDES'].append(os.path.join(AMBuild.sourceFolder, 'extension', 'asm'))

	name = 'tfdodgeball.ext.' + sdk['ext']
	extension = AMBuild.AddJob(name)
	binary = Cpp.LibraryBuilder(name, AMBuild, extension, compiler)
	SM.PreSetupHL2Job(extension, binary, i)

	binary.AddSourceFiles(os.path.join('extension', 'sdk'), ['smsdk_ext.cpp'])
	binary.AddSourceFiles('extension', ['extension.cpp'])
	binary.AddSourceFiles(os.path.join('extension', 'CEntity'), [
		'CEntity.cpp',
		'CEntityManager.cpp',
		'CAnimating.cpp',
		'CPlayer.cpp',
		'CEntityBase.cpp',
		'rtti.cpp',
		'CHelpers.cpp',
		'util.cpp',
		'CRecipientFilter.cpp',
		'EntityOutput.cpp',
		'CTakeDamageInfo.cpp',
		'CTFWeaponBase.cpp',
		'CTFRocket.cpp',
		'CServerCommand.cpp',
		])
	binary.AddSourceFiles(os.path.join('extension', 'CDetour'), ['detours.cpp'])
	binary.AddSourceFiles(os.path.join('extension', 'asm'), ['asm.c'])
	binary.AddSourceFiles('extension', [
		'CTrackingProjectile.cpp',
		'CTrackingProjectile_Nuke.cpp',
		'CVisibleNuke.cpp',
		'CTFDBPlayer.cpp',
		'CTFDBAmmoPack.cpp',
		'CTFDBEconItemView.cpp',
		'CTFDBDissolveField.cpp',
		'CTFDBFlameThrower.cpp',
		'CTFDBServerCommand.cpp',
		])
	
	SM.PostSetupHL2Job(extension, binary, i)
	SM.AutoVersion('extension', binary)
	SM.ExtractDebugInfo(extension, binary)
	binary.SendToJob()
